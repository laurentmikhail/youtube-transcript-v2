from fastapi import FastAPI, HTTPException
from youtube_transcript_api import YouTubeTranscriptApi, NoTranscriptFound, TranscriptsDisabled, NoMuxedTranscriptFound
from urllib.parse import urlparse, parse_qs

app = FastAPI()

def get_video_id(url: str) -> str:
    """Extracts the YouTube video ID from a given URL."""
    parsed_url = urlparse(url)
    if parsed_url.hostname in ('www.youtube.com', 'youtube.com'):
        if parsed_url.path == '/watch':
            query = parse_qs(parsed_url.query)
            return query.get('v', [None])[0]
        elif parsed_url.path.startswith('/embed/') or parsed_url.path.startswith('/v/'):
            return parsed_url.path.split('/')[2]
    elif parsed_url.hostname == 'youtu.be':
        return parsed_url.path[1:]
    return None

@app.get("/transcript")
async def get_youtube_transcript(video_url: str):
    """
    Fetches the transcript for a given YouTube video URL.
    Example: http://localhost:8000/transcript?video_url=https://www.youtube.com/watch?v=YOUR_VIDEO_ID
    """
    video_id = get_video_id(video_url)
    if not video_id:
        raise HTTPException(status_code=400, detail="Invalid YouTube video URL")

    try:
        transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
        transcript = transcript_list.find_generated_transcript(['en', 'es', 'fr', 'de']) # Try to find English, Spanish, French or German generated transcript
        
        # If no generated transcript is found, try to find a manually created one
        if not transcript:
            transcript = transcript_list.find_transcript(['en', 'es', 'fr', 'de']) # Try to find English, Spanish, French or German manually created transcript

        # If still no transcript, try to get any available transcript
        if not transcript and len(transcript_list._generated_transcripts) > 0:
            transcript = transcript_list._generated_transcripts.popitem()[1]
        
        if not transcript and len(transcript_list._manually_created_transcripts) > 0:
            transcript = transcript_list._manually_created_transcripts.popitem()[1]
        
        if not transcript:
            raise HTTPException(status_code=404, detail="No transcript found for this video.")

        fetched_transcript = transcript.fetch()
        return {"video_id": video_id, "transcript": fetched_transcript}
    except NoTranscriptFound:
        raise HTTPException(status_code=404, detail="No transcript found for this video.")
    except TranscriptsDisabled:
        raise HTTPException(status_code=403, detail="Transcripts are disabled for this video.")
    except NoMuxedTranscriptFound:
        raise HTTPException(status_code=404, detail="No muxed (audio + video) transcript found for this video. This often means only autogenerated transcripts are available and in different languages.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An error occurred: {str(e)}")

@app.get("/")
async def read_root():
    return {"message": "YouTube Transcript API Service"}
